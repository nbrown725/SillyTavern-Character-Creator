---
alwaysApply: true
description: Comprehensive architecture, structure, and execution flow of the SillyTavern Character Creator Chat extension.
---

### SillyTavern Character Creator Chat — Architecture & Flow (Refactored)

Use this guide to understand how the extension is structured and how data/UI flow through it. The architecture follows a clean separation of concerns: UI Layer → Controllers → Services → External APIs. File links are clickable to jump to source.

- **Manifest & Build Outputs**
  - Manifest: [manifest.json](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/manifest.json)
    - Loads JS: `dist/index.js`, CSS: `dist/style.css`.
  - Source: `src/`; built assets emitted to `dist/` via webpack and sass.
  - Project metadata/scripts: [package.json](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/package.json)

- **Primary Entry Point**
  - [src/index.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/index.ts)
    - On import, registers Handlebars helpers and orchestrates lifecycle.
    - `importCheck()` guards SillyTavern APIs; shows error if unavailable.
    - `initializeSettings()` loads/migrates settings; then `main()` executes.
    - `main()` calls:
      - `handleSettingsUI()`: renders settings UI and wires settings editors/presets.
      - `handlePopupUI()`: injects extension icon(s), opens popup, delegates UI events to controllers/helpers.
      - `initializeChat()`: sets up the chat tab lazy-loader and chat session.
    - All UI event handlers delegate to `UIHelpers` for common operations or controllers for business logic.

- **Settings & Defaults**
  - [src/settings.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/settings.ts)
    - Exports `settingsManager` using `ExtensionSettingsManager` from `sillytavern-utils-lib`.
    - Keys: `extensionName`, `VERSION`, `FORMAT_VERSION`, `DEFAULT_SETTINGS`, `SYSTEM_PROMPT_KEYS`, `DEFAULT_PROMPT_CONTENTS`.
    - Settings include:
      - `profileId`, max context selection (`profile|sampler|custom`) with `maxContextValue`.
      - `maxResponseToken`, `outputFormat` (`xml|json|none`).
      - `contextToSend`: toggles for ST description, character card, world info, existing fields, persona; message range type (`none|all|first|last|range`) with parameters; `dontSendOtherGreetings` behavior for alternate greetings.
      - `prompts`: consolidated system prompts and labels; editable via UI.
      - `promptPresets`: user-editable freeform instruction presets.
      - `mainContextTemplatePresets`: ordered blocks assembling final messages (e.g., `chatHistory`, `creatorChatHistory`, `stDescription`, `charDefinitions`, `lorebookDefinitions`, `existingFieldDefinitions`, `personaDescription`, `outputFormatInstructions`, `taskDescription`) with roles.
      - `showSaveAsWorldInfoEntry`: toggles the World Info entry feature visibility.
    - `initializeSettings()` defines migrations (`F_1.4` → `F_1.7`) to keep prior installs compatible.
  - Default prompt/template constants: [src/constants.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/constants.ts)

- **Architecture Layers (Clean Separation)**
  - **Controllers** - Business logic orchestration
    - [src/controllers/characterController.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/controllers/characterController.ts)
      - Handles all character operations: `generateField()`, `continueField()`, `loadCharacter()`, `resetFields()`, `saveCharacter()`, `saveAsWorldInfo()`, `exportDraftFields()`, `importDraftFields()`
      - Orchestrates services and manages field generation flow
    - [src/controllers/chatController.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/controllers/chatController.ts)
      - Manages chat operations: `sendMessage()`, `editMessage()`, `deleteMessage()`, `clearChat()`, `exportChat()`
      - Coordinates between UI, session storage, and message generation
  
  - **Services** - Core business logic
    - [src/services/sessionService.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/services/sessionService.ts)
      - Single source of truth for all extension data (singleton pattern)
      - Manages localStorage persistence and session state with advanced storage optimization
      - Methods: `getSession()`, `updateSession()`, `updateField()`, `updateDraftField()`, `addChatMessage()`, etc.
      - Image persistence: `storeImageThumbnail()`, `getImageThumbnail()`, `getMessageForAIContext()`
      - Smart storage management: strips large data URLs, uses compressed thumbnails, quota error recovery
    - [src/services/messageBuilder.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/services/messageBuilder.ts)
      - Centralizes all prompt/message construction logic
      - Used by both chat and field generation for consistent message building
      - Handles context assembly, template compilation, and message formatting
    - [src/services/imageService.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/services/imageService.ts)
      - Unified image handling for chat and field generation with persistent storage
      - Methods: `processImageFile()`, `createImageContentPart()`, `createThumbnail()`, `createImagePreviewHtml()`
      - Manages image compression and thumbnail generation for efficient storage
  
  - **Utilities** - Common UI operations
    - [src/utils/uiHelpers.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/utils/uiHelpers.ts)
      - Centralizes common UI patterns and event binding
      - Methods: `bindFieldOperations()`, `handleFieldGeneration()`, `handleFieldComparison()`, `createTextChangeHandler()`, `showConfirmation()`, etc.
      - Eliminates duplicate UI code across different field types

  - **Type Definitions**
    - [src/types.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/types.ts)
      - Central type definitions: `Session`, `CharacterField`, `CreatorChatMessage`, `ChatMessage`, `ContentPart`, etc.
      - Enhanced `ContentPart` with `thumbnailUrl` and `originalSize` for image persistence
      - `Session` includes `imageThumbnails` storage for compressed image data
      - Ensures type safety across all modules

- **Generation Core (Simplified)**
  - [src/generate.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/generate.ts)
    - `globalContext = SillyTavern.getContext()` for ST integration.
    - Character fields definitions:
      - `CHARACTER_FIELDS`: `name, description, personality, scenario, first_mes, mes_example`.
      - `CHARACTER_LABELS`: human-readable labels.
    - `Session` interface defined in [src/types.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/types.ts) - managed by SessionService
    - `runCharacterFieldGeneration(params)` now simplified - delegates message building to MessageBuilder:
      1. Validates connection profile and resolves selected API from ST.
      2. Delegates all message construction to `MessageBuilder.buildMessages()` which handles:
         - Template data preparation
         - Character/lorebook definitions
         - Context assembly based on settings
         - Handlebars compilation and macro substitution
      3. Sends request via `ConnectionManagerRequestService.sendRequest(profileId, messages, maxResponseToken)`.
      4. Parses the model output via [src/parsers.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/parsers.ts).
      5. Returns the extracted string to the caller.

- **Popup/UI Flow** (Delegated Pattern)
  - [src/index.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/index.ts) handles UI setup and event delegation:
    - Renders popup via `globalContext.renderExtensionTemplateAsync()`
    - Binds UI controls but delegates all operations to controllers/helpers
  - **All field operations** (Generate/Continue/Compare/Clear) delegate to:
    - `UIHelpers.handleFieldGeneration()` for generation with consistent loading states
    - `UIHelpers.handleFieldComparison()` for diff display
    - `UIHelpers.createTextChangeHandler()` for value updates
    - `UIHelpers.createPromptChangeHandler()` for prompt updates
  - **Character operations** delegate to `CharacterController`:
    - Load character: `characterController.loadCharacter()`
    - Reset fields: `characterController.resetFields()`
    - Save character: `characterController.saveCharacter()`
    - Save as World Info: `characterController.saveAsWorldInfo()`
    - Import/Export draft fields: `characterController.importDraftFields()` / `exportDraftFields()`
  - **Session updates** handled exclusively by `SessionService`:
    - No direct localStorage access in UI code
    - All state changes go through `sessionService.updateSession()`, `updateField()`, etc.

- **Chat Tab** (Unified with Main Generation)
  - [src/chat.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/chat.ts) - Pure UI layer
    - `initializeChat()` sets up event handlers and tab click listener
    - `loadChatUI()` renders `templates/chat` and binds UI events
    - All chat operations delegate to `ChatController`:
      - Send message: `chatController.sendMessage()`
      - Edit/Delete: `chatController.editMessage()` / `deleteMessage()`
      - Clear/Export: `chatController.clearChat()` / `exportChat()`
    - Image handling via `chatController.processImageFile()`
  - Chat messages stored in unified `SessionService.creatorChatHistory`
  - Uses same `runCharacterFieldGeneration()` pipeline as field generation

- **Image Persistence System** (Advanced Storage Management)
  - **Two-Tier Storage Architecture**:
    - **AI Context**: Full/thumbnail images stored in `CreatorChatMessage.content` for AI requests
    - **UI Display**: Compressed thumbnails stored in `Session.imageThumbnails` for persistence
    - **Storage Keys**: Generated as `img_${timestamp}_${random}` for unique identification
  - **Smart Storage Flow**:
    1. User uploads image → `ImageService.createThumbnail()` compresses to ~200x200px JPEG
    2. `SessionService.storeImageThumbnail()` saves compressed version separately
    3. Message content stores image reference (`thumbnailUrl`) instead of large data URL
    4. `SessionService.sanitizeChatMessageForStorage()` strips large URLs before localStorage
    5. `SessionService.getMessageForAIContext()` restores images when building AI requests
  - **Quota Error Recovery**:
    - Tier 1: Strip all image data URLs from messages
    - Tier 2: Keep only last 20 messages
    - Tier 3: Clear thumbnails older than 1 hour
    - Tier 4: Clear all chat history as last resort
  - **Browser Refresh Persistence**: Images remain in chat after browser restart via thumbnail restoration

- **Parsers**
  - [src/parsers.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/parsers.ts)
    - `parseResponse()` normalizes code blocks, optionally concatenates with `previousContent` for continuation, and extracts based on selected format.
    - Enhanced for plain text mode: returns full response content instead of restricting to code blocks
    - `getPrefilled()` returns an incomplete wrapper for `xml|json` to prompt model continuation.

- **Key External Utilities (from sillytavern-utils-lib)**
  - UI builders: `buildFancyDropdown`, `buildPresetSelect`, `buildSortableList`.
  - ST integration: `buildPrompt`, `ConnectionManagerRequestService`, `applyWorldInfoEntry`, `createCharacter`, `saveCharacter`.
  - Configs: `selected_group`, `this_chid`, `world_names`, `st_echo`, `name1`.

- **Data Models**
  - Character fields: `CHARACTER_FIELDS` and `CHARACTER_LABELS` in [src/generate.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/generate.ts).
  - Session shape: `Session` in [src/types.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/types.ts) (selected characters/worlds, fields, draft fields, last loaded id, creator chat history, image thumbnails).
  - Settings shape: `ExtensionSettings` in [src/settings.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/settings.ts).
  - Image persistence: Full images stored in message content for AI context; compressed thumbnails stored separately for UI display and storage efficiency.

- **Adding a New Core Field (How-To)**
  1. Update `CHARACTER_FIELDS` and `CHARACTER_LABELS` in [src/generate.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/generate.ts).
  2. In [src/index.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/index.ts), extend `fieldConfigs` and ensure UI cloning/binding covers the field (generate/continue/compare/clear + per-field prompt if needed).
  3. If needed, adjust parser or prompt templates in [src/constants.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/constants.ts) and `DEFAULT_PROMPT_CONTENTS` in [src/settings.ts](mdc:public/scripts/extensions/third-party/SillyTavern-Character-Creator-Chat/src/settings.ts).
  4. Verify persistence in the `Session` object and import/export paths.

- **Architecture Diagram**
  ```
  ┌─────────────────────────────────────────────────────────────┐
  │                        UI Layer                              │
  │  index.ts, chat.ts (DOM manipulation, event binding)        │
  └─────────────────┬───────────────────────────────────────────┘
                    │ Event Delegation
  ┌─────────────────▼───────────────────────────────────────────┐
  │                   Utility Layer                             │
  │             UIHelpers (common UI operations)                │
  └─────────────────┬───────────────────────────────────────────┘
                    │ Business Logic
  ┌─────────────────▼───────────────────────────────────────────┐
  │                 Controller Layer                            │
  │  CharacterController, ChatController (orchestration)       │
  └─────────────────┬───────────────────────────────────────────┘
                    │ Data & Operations
  ┌─────────────────▼───────────────────────────────────────────┐
  │                  Service Layer                              │
  │ SessionService, MessageBuilder, ImageService (core logic)  │
  └─────────────────┬───────────────────────────────────────────┘
                    │ External APIs
  ┌─────────────────▼───────────────────────────────────────────┐
  │                 SillyTavern APIs                            │
  │        buildPrompt, ConnectionManager, etc.                │
  └─────────────────────────────────────────────────────────────┘
  ```

- **End-to-End Flow Summary**
  1. Extension loads → `initializeSettings()` → `main()` → UI setup with event delegation
  2. User interaction → UI event → UIHelpers/Controller → Service → External API
  3. Field generation: UI → `UIHelpers.handleFieldGeneration()` → `CharacterController.generateField()` → `MessageBuilder.buildMessages()` → `runCharacterFieldGeneration()` → Parse response → Update via `SessionService`
  4. Chat: UI → `ChatController.sendMessage()` → Same message pipeline → Update session
  5. All state persisted via `SessionService` → localStorage

- **Templates & Styling**
  - HTML templates under `templates/` rendered via `globalContext.renderExtensionTemplateAsync('third-party/${extensionName}', ...)`.
  - Compiled CSS: `dist/style.css` from `src/styles` via sass.

- **Key Architectural Improvements (Post-Refactor)**
  - **Single Source of Truth**: All session data managed by `SessionService` - no more dual storage issues
  - **Unified Message Pipeline**: Both chat and field generation use same `MessageBuilder` → `runCharacterFieldGeneration()` flow
  - **Clean Separation of Concerns**: UI only handles DOM; Controllers orchestrate; Services manage data/logic
  - **Advanced Image Persistence**: Smart storage system with thumbnail compression, quota error recovery, and persistent chat history
  - **Storage Optimization**: Large image data URLs stripped from localStorage; compressed thumbnails stored separately; aggressive fallback pruning
  - **Consistent Image Handling**: Single `ImageService` for all image operations with `createThumbnail()` for efficient storage
  - **No Code Duplication**: ~600+ lines of duplicate UI code eliminated via `UIHelpers`
  - **Type Safety**: Centralized types in `types.ts` ensure consistency across modules
  - **Maintainable**: Changes to business logic happen in one place (controllers/services)
  - **Testable**: Each layer can be tested independently

- **Related Docs**
  - SillyTavern extensions: https://github.com/SillyTavern/SillyTavern/blob/dev/docs/extensions.md
  - Context assembly: https://github.com/SillyTavern/SillyTavern/blob/dev/docs/getContext.md

